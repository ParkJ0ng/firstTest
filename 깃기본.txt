Git : 버전관리, 형상관리 프로그램
TestToken : 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

git bash 명령어
최초에 딱 한번만 실행하는 명령어(포멧)
git 사용자 정보 세팅
 # 현재 pc에 세팅된 사용자 이름을 조회
  git config --global user.name
 #사용자 이름을 등록 /수정
  git config --global user.name (유저이름[이메일 앞자리])
 # 현재 pc에 세팅된 이메일을 조회
  git config --global user.email
 #사용자 이메일을 등록 /수정
  git config --global user.email (이메일)





git init

git branch -m master main

git status    :  상태확인

git add    : 파일명   (git add .)폴더의 모든 파일 추가

git commit -m "메모장 파일 생성"  :현재상태 저장

git remote add origin (깃허브 레퍼지토리 주소) 
:원격 저장소에 .git 폴더가 있는(지역 저장소)를 연결

git push origin main  :  깃허브 레퍼지토리에 new branch 

사용방법(처음 파일을 깃허브에 올릴때 )	커밋은 자주하자?
1.github에 repository 생성
2.github에 올리려는 파일이 있는 폴더에서 gitBash실행
3. git init 명령어 실행 
  -> gitBash 실행 폴더안의 파일들을 형상관리 할 수 있도록 초기화
      .git이라는 숨긴 파일 생성
      .git이라는 폴더가 있는 폴더가 지역 저장소로 선언이 됨
3-2브렌치를 main으로 변경
  -> git branch -m master main
4. 원격 저장소에 .git 폴더가 있는(지역 저장소)를 연결 url을 origin라고 하겠다.
  -> git remote add origin 깃허브 레퍼지토리 URL 
5. 지역저장소에서 원격 저장소로 전달할 파일을 스테이징한다.
  -> git add 파일명
  -> git add .
6. 지금까지의 내용을 저장(되돌아갈 수 있는 복원 지점 생성)
  -> git commit -m "커밋 메세지"
7. 원격 저장소에 파일 올리기
  -> git push origin main(브렌치명)		(origin 은 url)

깃허브에 연결된 후 사용 방법
1) 수정한 파일 원격저장소에 올리기
	git pull origin main
	git add .
	git commit -m "커밋 메세지"
	git push origin main(브렌치명)
2) 수정한 파일 로컬로 내려받기
	git pull origin main
---------------------------------------------------
 branch 관련 명령어
git branch -> 현재 만들어진 branch의 목록

 #브렌치 생성
  git branch 브렌치명

 #브렌치 변경
  git checkout 브렌치명


 #브렌치 병합
  git merge 브렌치명

--팀플 순서
1. 원격 저장소 생성
2. 프로젝트 생성
3. 인텔리J에서 깃 배쉬로 git init 실행(지역저장소 생성)
4. 기본 브런치를 메인으로 변경한다.
   git branch -m master main
5. 원격 저장소 지정
   git remote add origin URL
6. dev 브런치를 생성한다
   (main브런치에서)git branch dev
7. dev 브런치의 내용을 저장하고 원격 저장소로 올린다.
 git add .
 git commit -m "커밋메세지"
 git push origin dev
8. main 브런치의 내용을 저장하고 원격 저장소로 올린다.
 git add .
 git commit -m "커밋메세지"
 git push origin main

-- 팀원들 작업 (팀장 포함)
1. 팀장의 원격저장소 내용을 내려받는다. clone
 git clone [URL] [DIR 생략가능] 
2. dev 브런치로 변경한다. git pull origin dev
 git checkout dev
3. 본인이 코드를 작성할 브렌치를 생성
 git branch 브렌치명(깃허브사용자명)
4. 본인이 만든 브렌치로 변경 git checkout 브랜치명
5. 코드 작성
6. 본인 코드 저장(지역저장소에만 반영)
 git add .
 git commit -m "커밋메세지"
7. 원격 저장소로 저장된 내용을 반영한다.
 git push origin 브랜치명
8. 지역저장소에 있는 ev 브렌치에 내용을 반영 
 git checkout dev
 git merge 브렌치명
9. 원격 저장소의 dev 브렌치 내용을 내려받는다.  (다른 사람이 만든 클래스는 손대기X)
git pull origin dev
10. 지역저장소의 dev 브런치를 원격 저장소의 dev브런치에 반영한다.
 git push origin dev
11. 다음 작업전에 소스코드 최신화 본인이 만든 브렌치로 변경 dev를 가져온다
 git checkout 브랜치명
 git merge dev
12. 5번부터 반복적으로 시행한다.

작업 나누는 경우
큰 기능 :모듈 별로 패키지로 나누고 
올리기 전에 git status로 팀원 파일 건드렸는지 확인하기

같은 파일 수정 충돌시 나중에 올린 사람이 다시 받아서 수정 저장

팀장이 먼저 프로젝트 생성(레파지토리) + git branch -m master main
프로젝트의 복사본 branch를 만들고 dev에서 작업
각 팀원의 branch제작 dev로 전송 합친후 이상 없을시 본프로젝트에 branch 추가
main브런치 > dev브런치 >(팀장),(팀원)브런치
